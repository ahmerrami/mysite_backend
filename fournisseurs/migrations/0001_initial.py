# Generated by Django 3.2.25 on 2025-04-14 11:15

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Beneficiaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('raison_sociale', models.CharField(error_messages={'unique': 'Cette raison sociale est déjà utilisée.'}, help_text='Nom ou raison sociale du bénéficiaire', max_length=100, unique=True, verbose_name='Raison sociale')),
                ('adresse', models.CharField(blank=True, help_text='Adresse du bénéficiaire', max_length=50, null=True, verbose_name='Adresse')),
                ('ville', models.CharField(blank=True, help_text='Ville', max_length=20, null=True, verbose_name='Ville')),
                ('telephone', models.CharField(blank=True, error_messages={'unique': 'Ce numéro de téléphone est déjà utilisé.'}, help_text='Numéro de téléphone', max_length=10, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir exactement 10 chiffres.', regex='^\\d{10}$')], verbose_name='Téléphone')),
                ('registre_commerce', models.CharField(error_messages={'unique': 'Ce registre du commerce est déjà utilisé.'}, help_text='Numéro de registre du commerce', max_length=20, unique=True, verbose_name='Registre du commerce')),
                ('identifiant_fiscale', models.CharField(error_messages={'unique': 'Cet identifiant fiscal est déjà utilisé.'}, help_text='Identifiant fiscal du bénéficiaire', max_length=20, unique=True, verbose_name='Identifiant fiscal')),
                ('code_ice', models.CharField(error_messages={'unique': 'Ce code ICE est déjà utilisé.'}, help_text="Identifiant Commun de l'Entreprise (ICE)", max_length=15, unique=True, verbose_name='Code ICE')),
                ('actif', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='beneficiaire_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='beneficiaire_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Bénéficiaire',
                'verbose_name_plural': 'Bénéficiaires',
                'ordering': ['raison_sociale'],
            },
        ),
        migrations.CreateModel(
            name='CompteTresorerie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type_compte', models.CharField(choices=[('bancaire', 'Compte bancaire'), ('caisse', 'Caisse')], default='bancaire', help_text='Type de compte (bancaire ou caisse)', max_length=10, verbose_name='Type de compte')),
                ('banque', models.CharField(blank=True, help_text='Nom de la banque (uniquement pour les comptes bancaires)', max_length=50, null=True, verbose_name='Banque')),
                ('rib', models.CharField(blank=True, error_messages={'unique': 'Ce RIB est déjà utilisé.'}, help_text='Numéro du compte bancaire (uniquement pour les comptes bancaires)', max_length=24, null=True, validators=[django.core.validators.RegexValidator(message='Le RIB doit contenir exactement 24 chiffres.', regex='^\\d{24}$')], verbose_name='RIB')),
                ('est_nantissement', models.BooleanField(default=False, help_text='Cochez si ce compte est utilisé pour un nantissement (peut partager le RIB)', verbose_name='Compte en nantissement')),
                ('attestation_rib_pdf', models.FileField(blank=True, help_text="Fichier PDF de l'attestation RIB (uniquement pour les comptes bancaires)", null=True, upload_to='attestations_rib/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='Attestation RIB PDF')),
                ('nom_caisse', models.CharField(blank=True, help_text='Nom de la caisse (uniquement pour les caisses)', max_length=50, null=True, verbose_name='Nom de la caisse')),
                ('emplacement_caisse', models.CharField(blank=True, help_text='Emplacement physique de la caisse (uniquement pour les caisses)', max_length=100, null=True, verbose_name='Emplacement de la caisse')),
                ('detenteur_caisse', models.CharField(blank=True, help_text='Détenteur de la caisse (uniquement pour les caisses)', max_length=100, null=True, verbose_name='Détenteur de la caisse')),
                ('actif', models.BooleanField(default=True)),
                ('beneficiaire', models.ForeignKey(limit_choices_to={'actif': True}, on_delete=django.db.models.deletion.CASCADE, related_name='comptes', to='fournisseurs.beneficiaire', verbose_name='Bénéficiaire')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comptetresorerie_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comptetresorerie_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['beneficiaire'],
            },
        ),
        migrations.CreateModel(
            name='Contrat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moe', models.CharField(choices=[('fm', 'Facility management'), ('services', 'Services'), ('tourisme', 'Tourisme'), ('cfo', 'Front office ONCF'), ('support', 'Support')], default='fm', help_text="Maitrise d'oeuvres", max_length=20, verbose_name="Maitrise d'oeuvres")),
                ('type_contrat', models.CharField(choices=[('marche', 'Marché'), ('commande', 'Bon de commande'), ('contrat', 'Contrat'), ('convention', 'Convention')], default='marche', help_text='Type de contrat', max_length=20, verbose_name='Type de contrat')),
                ('numero_contrat', models.CharField(error_messages={'unique': 'Ce numéro de contrat est déjà utilisé.'}, max_length=20, unique=True, verbose_name='Numéro de contrat')),
                ('objet', models.CharField(max_length=500, verbose_name='Objet')),
                ('date_debut', models.DateField(verbose_name='Date de début')),
                ('date_fin', models.DateField(blank=True, null=True, verbose_name='Date de fin')),
                ('mode_paiement', models.CharField(choices=[('15J', '15 jours'), ('30J', '30 jours'), ('30JFDM', '30 jours fin de mois'), ('60J', '60 jours'), ('60JFDM', '60 jours fin de mois'), ('90J', '90 jours'), ('90JFDM', '90 jours fin de mois'), ('120J', '120 jours'), ('120JFDM', '120 jours fin de mois')], default='90JFDM', help_text='Mode de paiement', max_length=10, verbose_name='Mode de paiement')),
                ('montant_HT', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Montant HT')),
                ('taux_de_TVA', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(25)], verbose_name='Taux de TVA')),
                ('taux_RAS_TVA', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Taux RAS TVA')),
                ('taux_RAS_IS', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(40)], verbose_name='Taux RAS IS')),
                ('taux_RG', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Taux RG')),
                ('contrat_pdf', models.FileField(blank=True, help_text='Fichier PDF du contrat', null=True, upload_to='contrats/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='Contrat PDF')),
                ('actif', models.BooleanField(default=True)),
                ('beneficiaire', models.ForeignKey(limit_choices_to={'actif': True}, on_delete=django.db.models.deletion.PROTECT, related_name='contrats', to='fournisseurs.beneficiaire', verbose_name='Bénéficiaire')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contrat_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contrat_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrdreVirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reference', models.CharField(blank=True, max_length=15, null=True, unique=True, verbose_name="Autre référence de l'ordre de virement si édité sur un autre système")),
                ('type_ov', models.CharField(choices=[('Virement', 'Virement'), ('Transfert', 'Transfert')], max_length=15, verbose_name="Type d'ordre de virement")),
                ('mode_execution', models.CharField(choices=[('INDIVIDUEL', 'Individuel'), ('MASSE', 'En masse')], default='INDIVIDUEL', max_length=20, verbose_name="Mode d'exécution")),
                ('montant', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Montant')),
                ('date_ov', models.DateField(auto_now_add=True, verbose_name="Date de l'ordre de virement")),
                ('valide_pour_signature', models.BooleanField(default=False)),
                ('date_remise_banque', models.DateField(blank=True, null=True, verbose_name="Date remise de l'ordre de virement à la banque")),
                ('OV_remis_banque_pdf', models.FileField(blank=True, help_text="Fichier PDF de l'OV avec AR banque", null=True, upload_to='virements/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='OV signe PDF')),
                ('remis_a_banque', models.BooleanField(default=False)),
                ('date_operation_banque', models.DateField(blank=True, null=True, verbose_name='Date opération sur relevé bancaire')),
                ('avis_debit_pdf', models.FileField(blank=True, help_text='Avis de débit', null=True, upload_to='avisDebit/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='avis de débit PDF')),
                ('compte_debite', models.BooleanField(default=False)),
                ('beneficiaire', models.ForeignKey(limit_choices_to={'actif': True}, on_delete=django.db.models.deletion.PROTECT, related_name='ordres_virements', to='fournisseurs.beneficiaire', verbose_name='Bénéficiaire')),
                ('compte_tresorerie', models.ForeignKey(blank=True, limit_choices_to={'actif': True}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ordres_virements_compte', to='fournisseurs.comptetresorerie', verbose_name='Compte bancaire')),
                ('compte_tresorerie_emetteur', models.ForeignKey(blank=True, limit_choices_to={'actif': True}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ordres_virements_emetteur', to='fournisseurs.comptetresorerie', verbose_name='Compte bancaire émetteur')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ordrevirement_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ordrevirement_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Facture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('num_facture', models.CharField(max_length=50, verbose_name='Numéro de facture')),
                ('date_facture', models.DateField(verbose_name='Date facture')),
                ('date_echeance', models.DateField(verbose_name="Date d'échéance")),
                ('mnt_tva', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant TVA')),
                ('montant_ttc', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant TTC')),
                ('mnt_RAS_TVA', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant RAS TVA')),
                ('mnt_RAS_IS', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant RAS IS')),
                ('mnt_RG', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant RG')),
                ('mnt_net_apayer', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant net à payer')),
                ('date_paiement', models.DateField(blank=True, null=True, verbose_name='Date paiement')),
                ('statut', models.CharField(choices=[('attente', 'En attente'), ('etablissement', "OV en cours d'établissement"), ('signature', 'OV en cours de signature'), ('banque', 'OV remis à la banque'), ('payee', 'Facture payée')], default='attente', max_length=30, verbose_name='Statut')),
                ('montant_ht', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Montant HT')),
                ('proforma_pdf', models.FileField(blank=True, help_text='Fichier PDF de la facture proforma', null=True, upload_to='proformas/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='Proforma PDF')),
                ('facture_pdf', models.FileField(blank=True, help_text='Fichier PDF de la facture', null=True, upload_to='factures/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='Facture PDF')),
                ('PV_reception_pdf', models.FileField(blank=True, help_text='Fichier PDF de la reception', null=True, upload_to='receptions/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='Reception PDF')),
                ('date_execution', models.DateField(blank=True, null=True, verbose_name="Date d'exécution ou de réception")),
                ('beneficiaire', models.ForeignKey(limit_choices_to={'actif': True}, on_delete=django.db.models.deletion.CASCADE, related_name='factures_beneficiaire', to='fournisseurs.beneficiaire', verbose_name='Bénéficiaire')),
                ('contrat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='factures_contrat', to='fournisseurs.contrat', verbose_name='Contrat')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='facture_created_by', to=settings.AUTH_USER_MODEL)),
                ('ordre_virement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='factures_ov', to='fournisseurs.ordrevirement', verbose_name='Ordre de virement')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='facture_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Avoir',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('num_facture', models.CharField(max_length=50, verbose_name='Numéro de facture')),
                ('date_facture', models.DateField(verbose_name='Date facture')),
                ('date_echeance', models.DateField(verbose_name="Date d'échéance")),
                ('mnt_tva', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant TVA')),
                ('montant_ttc', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant TTC')),
                ('mnt_RAS_TVA', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant RAS TVA')),
                ('mnt_RAS_IS', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant RAS IS')),
                ('mnt_RG', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant RG')),
                ('mnt_net_apayer', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant net à payer')),
                ('date_paiement', models.DateField(blank=True, null=True, verbose_name='Date paiement')),
                ('statut', models.CharField(choices=[('attente', 'En attente'), ('etablissement', "OV en cours d'établissement"), ('signature', 'OV en cours de signature'), ('banque', 'OV remis à la banque'), ('payee', 'Facture payée')], default='attente', max_length=30, verbose_name='Statut')),
                ('montant_ht', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MaxValueValidator(-0.01)], verbose_name='Montant HT')),
                ('avoir_pdf', models.FileField(blank=True, help_text="Fichier PDF de l'avoir", null=True, upload_to='avoirs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='Avoir PDF')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='avoir_created_by', to=settings.AUTH_USER_MODEL)),
                ('facture_associee', models.ForeignKey(limit_choices_to={'statut': 'attente'}, on_delete=django.db.models.deletion.CASCADE, related_name='facture_avoirs', to='fournisseurs.facture', verbose_name='Facture associée')),
                ('ordre_virement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='avoirs_ov', to='fournisseurs.ordrevirement', verbose_name='Ordre de virement')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='avoir_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='facture',
            constraint=models.UniqueConstraint(fields=('beneficiaire', 'num_facture'), name='unique_beneficiaire_facture'),
        ),
    ]
